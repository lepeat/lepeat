{"version":3,"file":"static/js/603.b71e8a57.chunk.js","mappings":"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","sources":["utils/time.ts","components/statistics/debug/Statistics.tsx","components/table/Table.jsx"],"sourcesContent":["function padTwoDigits(num: number) {\n    return num.toString().padStart(2, \"0\");\n}\n\nexport function dateInHhMmDdMmYyyy(dateEpoch: number, dateDivider: string = \"-\") {\n    const date = new Date(dateEpoch);\n    return (\n        [\n            padTwoDigits(date.getHours()),\n            padTwoDigits(date.getMinutes()),\n        ].join(\":\") + \" \" +\n        [\n            padTwoDigits(date.getDate()),\n            padTwoDigits(date.getMonth() + 1),\n            date.getFullYear()\n        ].join(dateDivider)\n    );\n}","import React, {useContext} from \"react\";\nimport ProfileContext from \"../../../contexts/ProfileContext\";\nimport Table from \"../../table/Table\";\nimport {dateInHhMmDdMmYyyy} from \"../../../utils/time\";\n\nconst COLUMNS_PREDEFINED = [\n    {\n        Header: 'ID',\n        accessor: 'id_number',\n    },\n    {\n        Header: 'Term',\n        accessor: 'term',\n    }\n];\n\n//TODO support bran new Trainings\n//TODO try to get rid of any\n//TODO add memo for columns and data\nfunction Statistics() {\n    const {profile} = useContext(ProfileContext);\n\n    const terms = profile.terms;\n    const trainingProgresses = profile.trainingProgresses;\n\n    let columns: any[] = [...COLUMNS_PREDEFINED]\n    Array.from(trainingProgresses.keys()).forEach((trainingDefinition, idx) => {\n        columns.push({\n            Header: trainingDefinition.name,\n            columns: [\n                {\n                    Header: \"Iteration\",\n                    accessor: `training-${idx}-iteration`\n                },\n                {\n                    Header: \"Last training time\",\n                    accessor: `training-${idx}-time`\n                }\n            ]\n        })\n    });\n\n\n    const data: any[] = []\n    terms.forEach((term) => {\n        let termStringRepresentation = Array.from(term.attributeValues.values()).join('; ');\n\n        const termData: any = {id_number: term.id, term: termStringRepresentation};\n        // here i relay on order in map. should be fixed in the future\n        Array.from(trainingProgresses.values()).forEach((trainingProgress, idx) => {\n            let termProgress = trainingProgress.progress.get(term);\n\n            termData[`training-${idx}-iteration`] = termProgress ? termProgress.iterationNumber : \"-\"\n            termData[`training-${idx}-time`] = termProgress ? termProgress.lastEditDate ?  dateInHhMmDdMmYyyy(termProgress.lastEditDate) : '-' : '-';\n        })\n        data.push(termData)\n    })\n\n    return <Table columns={columns} data={data}/>\n}\n\nexport default Statistics;","import React from \"react\";\nimport {useTable, useGlobalFilter} from \"react-table\";\nimport {CButton, CFormInput, CTable, CTableBody, CTableDataCell, CTableHead, CTableRow} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Table({columns, data, additionalHeaderElements}) {\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setGlobalFilter, state} =\n        useTable({columns, data}, useGlobalFilter);\n\n    const {globalFilter} = state;\n\n    return (\n        <div>\n            <div className=\"w-100 mb-3 d-flex justify-content-between\">\n                <CFormInput\n                    className=\"w-50\"\n                    type=\"text\"\n                    value={globalFilter || ''}\n                    onChange={(e) => setGlobalFilter(e.target.value)}\n                />\n                {additionalHeaderElements}\n            </div>\n            <CTable {...getTableProps()}>\n                <CTableHead>\n                    {headerGroups.map((headerGroup) => (\n                        <CTableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <CTableDataCell {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                </CTableDataCell>\n                            ))}\n                        </CTableRow>\n                    ))}\n                </CTableHead>\n                <CTableBody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                        prepareRow(row);\n                        return (\n                            <CTableRow {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <CTableDataCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </CTableDataCell>\n                                    );\n                                })}\n                            </CTableRow>\n                        );\n                    })}\n                </CTableBody>\n            </CTable>\n        </div>\n    )\n}\n\n// Define the prop types\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    additionalHeaderElements: PropTypes.any, // Not marking as .isRequired makes it optional\n};"],"names":["padTwoDigits","num","toString","padStart","COLUMNS_PREDEFINED","Header","accessor","profile","useContext","ProfileContext","terms","trainingProgresses","columns","Array","from","keys","forEach","trainingDefinition","idx","push","name","concat","data","term","termStringRepresentation","attributeValues","values","join","termData","id_number","id","trainingProgress","termProgress","progress","get","iterationNumber","lastEditDate","dateEpoch","dateDivider","arguments","length","undefined","date","Date","getHours","getMinutes","getDate","getMonth","getFullYear","dateInHhMmDdMmYyyy","_jsx","Table","_ref","additionalHeaderElements","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","state","useTable","useGlobalFilter","globalFilter","_jsxs","children","className","CFormInput","type","value","onChange","e","target","CTable","CTableHead","map","headerGroup","CTableRow","getHeaderGroupProps","headers","column","CTableDataCell","getHeaderProps","render","CTableBody","row","getRowProps","cells","cell","getCellProps"],"sourceRoot":""}