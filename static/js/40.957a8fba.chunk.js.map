{"version":3,"file":"static/js/40.957a8fba.chunk.js","mappings":"2NAUO,SAASA,EAAsCC,GAClDA,EAAKC,WAAY,EACjBD,EAAKE,aAAeC,KAAKC,KAC7B,C,aCCA,MAAMC,EAAmBC,GACdA,EAAQC,MAAMC,KAAI,CAACC,EAAGC,KAAG,IACzBD,EACHC,UACAC,QAAOF,GAAKA,EAAER,YAyFtB,QA/EA,WACI,MAAM,UAACW,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IACzB,QAACR,IAAWO,EAAAA,EAAAA,YAAWE,EAAAA,IACtBC,EAAeC,IAAoBC,EAAAA,EAAAA,UAASb,EAAgBC,KAC5Da,EAAkBC,IAAuBF,EAAAA,EAAAA,UAASG,KAAKC,IAAI,GAAIN,EAAcO,SAEpF,IAAIC,GAA8BC,EAAAA,EAAAA,UAAQ,IAAM,CAC5C,CACIC,OAAQ,OACRC,SAAU,QAEd,CACID,OAAQ,SACRC,SAAU,UACVC,KAAMC,IAAA,IAAC,IAACC,GAAID,EAAA,OACRE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,UAAU,OAAOC,MAAO,UACxBC,QAASA,IAAMC,EAAYN,EAAIO,SAASC,IAAIC,SAAC,YAAkB,KAEjF,IAEH,MAAMH,EAAeE,IACjB,MAAMtC,EAAOM,EAAQC,MAAMiC,MAAK/B,GAAKA,EAAE6B,KAAOA,IAC1CtC,KD9CL,SAAqBA,EAAYM,GACpCN,EAAKC,WAAY,EACjBD,EAAKE,aAAeC,KAAKC,OACzBqC,EAAAA,EAAAA,IAAiBnC,EACrB,CC2CYoC,CAAY1C,EAAMM,GAClBN,EAAKC,WAAY,GACjBwC,EAAAA,EAAAA,IAAiBnC,GACjBW,EAAiBZ,EAAgBC,IACrC,EA6BEqC,EAAO3B,EAAcR,KAAIC,IAAC,CAC5B6B,GAAI7B,EAAE6B,GACNM,KAAMC,MAAMC,KAAKrC,EAAEsC,gBAAgBC,UAAUC,KAAK,UAGhDC,GAASC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAb,SAAA,EACXR,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACG,QAhCUkB,KACnBrC,EAAcsC,SAAQC,GAAKxD,EAAsCO,EAAQC,MAAMgD,EAAE7C,SACjF+B,EAAAA,EAAAA,IAAiBnC,GACjBW,EAAiBZ,EAAgBC,GAAS,EA6BR4B,MAAM,UAASK,SAAC,qBAClDY,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAACvB,UAAU,OAAMM,SAAA,EACzBR,EAAAA,EAAAA,KAAC0B,EAAAA,EAAe,CAACnB,GAAG,4BAA2BC,SAAC,WAChDR,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CAACC,KAAK,SAASrC,IAAK,EAAGsC,IAAK5C,EAAcO,OAAQe,GAAI,yBACrDuB,MAAO1C,EAAkB,mBAAiB,eAC1C2C,SAAWrD,IAAMsD,OAfdF,EAe4BpD,EAAEuD,OAAOH,WAdxDzC,GAAqByC,GADFA,KAe4C,KAC3D9B,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACE,MAAM,UAAUC,QAhCP8B,KAClBjD,EAAcO,OAASJ,EACvBP,EAAU,GAADsD,OAAI/C,EAAgB,2CAAA+C,OAA0ClD,EAAcO,QAAU,WAI/FJ,EAAmB,EACnBP,EAAU,GAADsD,OAAI/C,EAAgB,sBAAsB,YAIvDH,EAAcmD,MAAM,EAAGhD,GAAkBmC,SAAQC,GAAKxD,EAAsCO,EAAQC,MAAMgD,EAAE7C,SAC5G+B,EAAAA,EAAAA,IAAiBnC,GACjBW,EAAiBZ,EAAgBC,IAAS,EAmBciC,SAAC,sBAG7D,OACIR,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAAb,UACIR,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACzB,KAAMA,EAAMnB,QAASA,EAAS6C,yBAA0BnB,KAI3E,C,4HCpGe,SAASkB,EAAKvC,GAA6C,IAA5C,QAACL,EAAO,KAAEmB,EAAI,yBAAE0B,GAAyBxC,EAEnE,MAAM,cAACyC,EAAa,kBAAEC,EAAiB,aAAEC,EAAY,KAAEC,EAAI,WAAEC,EAAU,gBAAEC,EAAe,MAAEC,IACtFC,EAAAA,EAAAA,UAAS,CAACrD,UAASmB,QAAOmC,EAAAA,kBAExB,aAACC,GAAgBH,EAEvB,OACIzB,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACIY,EAAAA,EAAAA,MAAA,OAAKlB,UAAU,4CAA2CM,SAAA,EACtDR,EAAAA,EAAAA,KAAC2B,EAAAA,EAAU,CACPzB,UAAU,OACV0B,KAAK,OACLE,MAAOkB,GAAgB,GACvBjB,SAAWrD,GAAMkE,EAAgBlE,EAAEuD,OAAOH,SAE7CQ,MAELlB,EAAAA,EAAAA,MAAC6B,EAAAA,EAAM,IAAKV,IAAe/B,SAAA,EACvBR,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAAA1C,SACNiC,EAAahE,KAAK0E,IACfnD,EAAAA,EAAAA,KAACoD,EAAAA,EAAS,IAAKD,EAAYE,sBAAqB7C,SAC3C2C,EAAYG,QAAQ7E,KAAK8E,IACtBvD,EAAAA,EAAAA,KAACwD,EAAAA,EAAc,IAAKD,EAAOE,iBAAgBjD,SACtC+C,EAAOG,OAAO,qBAMnC1D,EAAAA,EAAAA,KAAC2D,EAAAA,EAAU,IAAKnB,IAAmBhC,SAC9BkC,EAAKjE,KAAKsB,IACP4C,EAAW5C,IAEPC,EAAAA,EAAAA,KAACoD,EAAAA,EAAS,IAAKrD,EAAI6D,cAAapD,SAC3BT,EAAI8D,MAAMpF,KAAKqF,IAER9D,EAAAA,EAAAA,KAACwD,EAAAA,EAAc,IAAKM,EAAKC,eAAcvD,SAClCsD,EAAKJ,OAAO,wBAWzD,C,uFCvCajC,GAAcuC,EAAAA,EAAAA,aACzB,SAACC,EAAwCC,G,MAAtC1D,EAAQyD,EAAAzD,SAAEN,EAAS+D,EAAA/D,UAAEiE,EAAIF,EAAAE,KAAKC,GAAhCC,EAAAA,EAAAA,IAAAJ,EAAA,iCACC,OACEK,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAArE,WAAWsE,EAAAA,EAAAA,GACT,eAAaC,EAAA,GAEXA,EAAC,eAAetC,OAAAgC,IAASA,EAAI,GAE/BjE,IAEEkE,EACJ,CAAAF,IAAKA,IAEJ1D,EAGP,IAGFiB,EAAYiD,UAAY,CACtBlE,SAAUmE,IAAAA,KACVzE,UAAWyE,IAAAA,OACXR,KAAMQ,IAAAA,MAAgB,CAAC,KAAM,QAG/BlD,EAAYmD,YAAc,a,uFCzBblD,GAAkBsC,EAAAA,EAAAA,aAC7B,SAACC,EAAiEC,GAA/D,IAAA1D,EAAQyD,EAAAzD,SAAEN,EAAS+D,EAAA/D,UAAEuE,EAA6BR,EAAAY,UAAlBC,OAAS,IAAAL,EAAG,OAAMA,EAAKL,GAAIC,EAAAA,EAAAA,IAAAJ,EAA7D,sCACC,OACEK,EAAAA,cAACQ,GAASP,EAAAA,EAAAA,IAAA,CAACrE,WAAWsE,EAAAA,EAAAA,GAAW,mBAAoBtE,IAAgBkE,EAAI,CAAEF,IAAKA,IAC7E1D,EAGP,IAGFkB,EAAgBgD,UAAY,CAC1BlE,SAAUmE,IAAAA,KACVzE,UAAWyE,IAAAA,OACXE,UAAWF,IAAAA,aAGbjD,EAAgBkD,YAAc,iB","sources":["services/TermsEditing.ts","backlog/BacklogPage.tsx","components/table/Table.jsx","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx"],"sourcesContent":["import {Term} from \"../model/Term\";\nimport {markProfileDirty} from \"./Persistence\";\nimport {LepeatProfile} from \"../model/LepeatProfile\";\n\nexport function MoveToLearn(term: Term, profile: LepeatProfile){\n    term.isBacklog = false;\n    term.lastEditDate = Date.now();\n    markProfileDirty(profile);\n}\n\nexport function MoveToLearnWithoutMarkingProfileDirty(term: Term){\n    term.isBacklog = false;\n    term.lastEditDate = Date.now();\n}","import React, {useContext, useMemo, useState} from \"react\";\nimport ProfileContext from \"../contexts/ProfileContext\";\nimport {\n    CButton,\n    CFormInput,\n    CInputGroup, CInputGroupText,\n} from \"@coreui/react\";\nimport {markProfileDirty} from \"../services/Persistence\";\nimport {LepeatProfile} from \"../model/LepeatProfile\";\nimport ToastContext from \"../contexts/ToastContext\";\nimport {Column} from \"react-table\";\nimport Table from \"../components/table/Table\";\nimport {MoveToLearn, MoveToLearnWithoutMarkingProfileDirty} from \"../services/TermsEditing\";\n\nconst getBacklogTerms = (profile: LepeatProfile) => {\n    return profile.terms.map((e, idx) => ({\n        ...e,\n        idx\n    })).filter(e => e.isBacklog)\n}\n\ninterface DataType {\n    id: string,\n    word: string,\n    actions: any\n}\n\n\nfunction BacklogPage() {\n    const {showToast} = useContext(ToastContext)\n    const {profile} = useContext(ProfileContext);\n    const [termsToRender, setTermsToRender] = useState(getBacklogTerms(profile))\n    const [termToLearnCount, setTermToLearnCount] = useState(Math.min(30, termsToRender.length));\n\n    let columns: Column<DataType>[] = useMemo(() => [\n        {\n            Header: 'Word',\n            accessor: 'word',\n        },\n        {\n            Header: 'Action',\n            accessor: 'actions',\n            Cell: ({row}) =>\n                <CButton className=\"mx-1\" color={\"success\"}\n                         onClick={() => moveToLearn(row.original.id)}>To Learn</CButton>,\n        }\n    ], []);\n\n    const moveToLearn = (id: string) => {\n        const term = profile.terms.find(e => e.id === id);\n        if (term) {\n            MoveToLearn(term, profile);\n            term.isBacklog = false;\n            markProfileDirty(profile);\n            setTermsToRender(getBacklogTerms(profile))\n        }\n    }\n\n    const moveAllToLearn = () => {\n        termsToRender.forEach(t => MoveToLearnWithoutMarkingProfileDirty(profile.terms[t.idx]));\n        markProfileDirty(profile);\n        setTermsToRender(getBacklogTerms(profile));\n    }\n\n    const moveNFirstToLearn = () => {\n        if (termsToRender.length < termToLearnCount) {\n            showToast(`${termToLearnCount} is more than available terms to learn ${termsToRender.length}`, \"warning\")\n            return;\n        }\n\n        if (termToLearnCount < 0) {\n            showToast(`${termToLearnCount} is negative value`, \"warning\")\n            return;\n        }\n\n        termsToRender.slice(0, termToLearnCount).forEach(t => MoveToLearnWithoutMarkingProfileDirty(profile.terms[t.idx]));\n        markProfileDirty(profile);\n        setTermsToRender(getBacklogTerms(profile));\n    }\n\n    const onInputChange = (value: string) => {\n        setTermToLearnCount(+value);\n    }\n\n    const data = termsToRender.map(e => ({\n        id: e.id,\n        word: Array.from(e.attributeValues.values()).join(\"; \")\n    }));\n\n    const header = <>\n        <CButton onClick={moveAllToLearn} color=\"primary\">Learn all terms</CButton>\n        <CInputGroup className=\"w-25\">\n            <CInputGroupText id=\"inputGroup-sizing-default\">Learn</CInputGroupText>\n            <CFormInput type=\"number\" min={0} max={termsToRender.length} id={\"termsToLearnCountInput\"}\n                        value={termToLearnCount} aria-describedby=\"basic-addon3\"\n                        onChange={(e) => onInputChange(e.target.value)}/>\n            <CButton color=\"primary\" onClick={moveNFirstToLearn}>First terms</CButton>\n        </CInputGroup></>\n\n    return (\n        <>\n            <Table data={data} columns={columns} additionalHeaderElements={header}/>\n        </>\n\n    )\n}\n\nexport default BacklogPage;","import React from \"react\";\nimport {useTable, useGlobalFilter} from \"react-table\";\nimport {CButton, CFormInput, CTable, CTableBody, CTableDataCell, CTableHead, CTableRow} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Table({columns, data, additionalHeaderElements}) {\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setGlobalFilter, state} =\n        useTable({columns, data}, useGlobalFilter);\n\n    const {globalFilter} = state;\n\n    return (\n        <div>\n            <div className=\"w-100 mb-3 d-flex justify-content-between\">\n                <CFormInput\n                    className=\"w-50\"\n                    type=\"text\"\n                    value={globalFilter || ''}\n                    onChange={(e) => setGlobalFilter(e.target.value)}\n                />\n                {additionalHeaderElements}\n            </div>\n            <CTable {...getTableProps()}>\n                <CTableHead>\n                    {headerGroups.map((headerGroup) => (\n                        <CTableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <CTableDataCell {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                </CTableDataCell>\n                            ))}\n                        </CTableRow>\n                    ))}\n                </CTableHead>\n                <CTableBody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                        prepareRow(row);\n                        return (\n                            <CTableRow {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <CTableDataCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </CTableDataCell>\n                                    );\n                                })}\n                            </CTableRow>\n                        );\n                    })}\n                </CTableBody>\n            </CTable>\n        </div>\n    )\n}\n\n// Define the prop types\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    additionalHeaderElements: PropTypes.any, // Not marking as .isRequired makes it optional\n};","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CInputGroupText = forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n  ({ children, className, component: Component = 'span', ...rest }, ref) => {\n    return (\n      <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCInputGroupText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n"],"names":["MoveToLearnWithoutMarkingProfileDirty","term","isBacklog","lastEditDate","Date","now","getBacklogTerms","profile","terms","map","e","idx","filter","showToast","useContext","ToastContext","ProfileContext","termsToRender","setTermsToRender","useState","termToLearnCount","setTermToLearnCount","Math","min","length","columns","useMemo","Header","accessor","Cell","_ref","row","_jsx","CButton","className","color","onClick","moveToLearn","original","id","children","find","markProfileDirty","MoveToLearn","data","word","Array","from","attributeValues","values","join","header","_jsxs","_Fragment","moveAllToLearn","forEach","t","CInputGroup","CInputGroupText","CFormInput","type","max","value","onChange","onInputChange","target","moveNFirstToLearn","concat","slice","Table","additionalHeaderElements","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","state","useTable","useGlobalFilter","globalFilter","CTable","CTableHead","headerGroup","CTableRow","getHeaderGroupProps","headers","column","CTableDataCell","getHeaderProps","render","CTableBody","getRowProps","cells","cell","getCellProps","forwardRef","_a","ref","size","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","displayName","component","Component"],"sourceRoot":""}