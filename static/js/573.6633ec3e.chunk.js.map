{"version":3,"file":"static/js/573.6633ec3e.chunk.js","mappings":"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","sources":["components/card/Card.tsx","components/training/TrainingSession.tsx","utils/shuffle.ts","services/TrainingService.ts","utils/string.ts"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {CCard, CCardFooter, CCardText, CCardTitle} from \"@coreui/react\";\nimport {Status, TermTrainingProgress} from \"../../model/TrainingProgress\";\n\ntype CardProps = {\n    question: string;\n    answer: string;\n    termTrainingProgress: TermTrainingProgress;\n};\n\nfunction Card({question, answer, termTrainingProgress}: CardProps) {\n    const [mode, setMode] = useState<\"QUESTION\" | \"ANSWER\">(\"QUESTION\");\n\n    useEffect(() => {\n        setMode(\"QUESTION\")\n    }, [question, answer]);\n\n    const onClick = () => {\n        setMode(mode === \"QUESTION\" ? \"ANSWER\" : \"QUESTION\");\n    }\n\n    const getIterationsDescription = () => {\n        const readableIteration = termTrainingProgress.iterationNumber + 1;\n        switch (termTrainingProgress.status) {\n            case Status.Learning:\n                return `Learn: iteration ${readableIteration}`;\n            case Status.Repetition:\n                return `Repeat: iteration ${readableIteration}`;\n            case Status.Relearning:\n                return `Relearn: back from iteration ${readableIteration}`;\n        }\n    }    \n    return (\n        <CCard className=\"text-center w-100\">\n\n            <div className=\"m-2\" onClick={onClick}>\n                <CCardTitle>{mode}</CCardTitle>\n                <CCardText className=\"m-2 d-flex align-items-center justify-content-center\" style={{ minHeight: '5rem' }}>\n                    {mode === \"QUESTION\" ? question : answer}\n                </CCardText>\n            </div>\n            <CCardFooter className=\"text-body-secondary py-1\" onClick={onClick}>\n                <small>\n                    {getIterationsDescription()}\n                </small>\n            </CCardFooter>\n        </CCard>\n    )\n}\n\n\nexport default Card;","import React, {ChangeEvent, FC, useContext, useMemo, useRef, useState} from \"react\";\nimport Card from '../card/Card';\nimport './wordCheck.scss';\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport {\n    copyTermTrainingProgress,\n    getTermsToTrain,\n    updateTermProgressDontKnown,\n    updateTermProgressEasy,\n    updateTermProgressHard,\n    updateTermProgressKnown,\n    updateTermTrainingProgress\n} from \"../../services/TrainingService\";\nimport {CButton, CButtonGroup, CFormSelect, CInputGroup, CInputGroupText, CProgress} from \"@coreui/react\";\nimport ProfileContext from \"../../contexts/ProfileContext\";\nimport {Status, TermTrainingProgress} from \"../../model/TrainingProgress\";\nimport {cilActionUndo, cilChevronDoubleLeft, cilChevronDoubleRight} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport {AttributeDefinition} from \"../../model/AttributeDefinition\";\nimport _ from \"lodash\";\nimport {findStringsInCurlyBraces, substituteBraces} from \"../../utils/string\";\nimport {shuffle} from \"../../utils/shuffle\";\n\nconst UndoButton: FC<{undo: () => void, className: string}> = ({undo, className}) => {\n    return <CButton className={className} color={\"secondary\"} onClick={undo}>\n        <CIcon icon={cilActionUndo} className=\"me-2\"/>\n        Undo\n    </CButton>\n}\n\ntype Order = 'dateAdded' | 'dateAddedReverse' | 'lastTrained' | 'lastTrainedReverse' | 'random';\n\nconst orderOptions: { label: string; value: Order }[] = [\n    {label: \"Date added: oldest first\", value: 'dateAdded'},\n    {label: \"Date added: newest first\", value: 'dateAddedReverse'},\n    {label: \"Date last trained: oldest first\", value: 'lastTrained'},\n    {label: \"Date last trained: latest first\", value: 'lastTrainedReverse'},\n    {label: \"Shuffled\", value: 'random'}\n];\n\nconst prepareString = (pattern: string, attributesData: Map<AttributeDefinition, string>) => {\n    const placeholderAttributes = new Set(findStringsInCurlyBraces(pattern));\n\n    const placeholdersData: any = {};\n    Array.from(attributesData.entries())\n        .filter((v) => placeholderAttributes.has(v[0].name))\n        .forEach(e => placeholdersData[e[0].name] = e[1]);\n\n    const compiled = _.template(substituteBraces(pattern));\n    return compiled(placeholdersData);\n}\n\ntype cardResult = TermTrainingProgress | null;\n\nfunction TrainingSession() {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const {trainingName, trainingType} = location.state;\n\n    const {profile} = useContext(ProfileContext);\n    const trainingDefinition = profile.trainingDefinitions.find(value => value.name === trainingName);\n    const oldTermProgress = useRef<cardResult[]>([]);\n\n    const [currentTermIdx, setCurrentTermIdx] = useState(0);\n    const lastSelectedOrderKey = 'lastOrder' + trainingName;\n    const defaultOrder = (localStorage.getItem(lastSelectedOrderKey) as Order) || 'dateAdded';\n    console.log(`get from local storage: ${lastSelectedOrderKey} = ${defaultOrder}`)\n\n    // hack: we wrap Order in a new object to force memo reevaluation since we can change the order in the middle of a training, and then we don't want to traverse already trained terms\n    const [orderObject, setOrderObject] = useState<{ order: Order }>({ order: defaultOrder});\n\n    const termTrainingProgress = useMemo(() => {\n        if (trainingDefinition) {\n            const termsToTrain = getTermsToTrain(profile, trainingDefinition, trainingType);\n            const order = orderObject.order;\n            switch(order) {\n                case 'dateAdded':\n                    return termsToTrain;\n                case 'dateAddedReverse':\n                    return termsToTrain.reverse();\n                case 'lastTrained':\n                    return termsToTrain.sort((a, b) =>\n                        (a.lastEditDate || Number.MAX_VALUE) - (b.lastEditDate || Number.MAX_VALUE)\n                    );\n                case 'lastTrainedReverse':\n                    return termsToTrain.sort((a, b) =>\n                        (b.lastEditDate || Number.MIN_VALUE) - (a.lastEditDate || Number.MIN_VALUE)\n                    );\n                case 'random':\n                    return shuffle(termsToTrain);\n                default:\n                    return termsToTrain;\n            }\n        }\n        return undefined;\n    }, [profile, trainingDefinition, trainingType, orderObject]);\n\n    if (!trainingDefinition || !termTrainingProgress) {\n        return (\"Unknown training\");\n    }\n\n    const onUndoClicked = () => {\n        const data = oldTermProgress.current;\n        const prevTermProgressData = data.pop();\n        if (!prevTermProgressData) {\n            console.error(\"Cannot undo on empty memo-data. Do nothing.\");\n            return;\n        }\n\n        updateTermTrainingProgress(prevTermProgressData, termTrainingProgress[currentTermIdx - 1], profile);\n        setCurrentTermIdx((currentValue) => currentValue - 1);\n    }\n\n    const onSkipClicked = () => {\n        oldTermProgress.current.push(null)\n        setCurrentTermIdx((currentValue) => currentValue + 1);\n    }\n\n    const onPrevClicked = () => {\n        oldTermProgress.current.pop();\n        setCurrentTermIdx((currentValue) => currentValue - 1);\n    }\n\n    const hasUndo = currentTermIdx > 0 && oldTermProgress.current[currentTermIdx - 1] !== null;\n\n    const renderProgressArea = () => {\n        return (\n            <>\n                <div className=\"d-flex flex-row justify-content-between align-items-center\">\n                    {hasUndo &&\n                        <UndoButton className={\"px-4\"} undo={onUndoClicked}/>}\n\n                    {!hasUndo &&\n                        <CButton className=\"px-4\" color={\"secondary\"} onClick={onPrevClicked}\n                                 disabled={currentTermIdx === 0}>\n                            <CIcon icon={cilChevronDoubleLeft} className=\"me-2\"/>\n                            Back\n                        </CButton>\n                    }\n\n                    <div className=\"text-body-secondary text-center\">\n                        {currentTermIdx < termTrainingProgress.length ? `${currentTermIdx + 1} / ${termTrainingProgress.length}` : \"Finished\"}\n                    </div>\n\n                    <CButton className=\"px-4\" color={\"info\"} onClick={onSkipClicked}\n                             disabled={currentTermIdx === termTrainingProgress.length}>\n                        Skip\n                        <CIcon icon={cilChevronDoubleRight} className=\"ms-2\"/>\n                    </CButton>\n                </div>\n\n                <div className=\"w-100 text-center\">\n                    <CProgress thin className=\"my-3\" color={\"primary\"}\n                               value={100 * (currentTermIdx) / termTrainingProgress.length}/>\n\n                </div>\n            </>\n        );\n    }\n    \n    const renderToDashboardButton = () => {\n        return (\n            <div className=\"text-center\">\n                <div className=\"d-inline-block\">\n                    <CButton className=\"px-4\" color={\"primary\"} onClick={() => navigate(\"/dashboard\")}>\n                        To Dashboard\n                    </CButton>\n                </div>\n            </div>\n        );\n    }\n\n    if (currentTermIdx >= termTrainingProgress.length) {\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <div>{renderToDashboardButton()}</div>\n                <div className=\"mt-auto\">{renderProgressArea()}</div>\n            </div>\n\n        )\n    }\n\n    const currentTermProgress = termTrainingProgress[currentTermIdx];\n    const currentTerm = currentTermProgress.term;\n\n    const currentTermDefinition = currentTerm.termDefinition;\n    const currentRule = trainingDefinition.configuration.get(currentTermDefinition)!; // TODO think on corner case\n\n    const question = prepareString(currentRule.questionPattern, currentTerm.attributeValues);\n    const answer = prepareString(currentRule.answerPattern, currentTerm.attributeValues);\n\n    const canShowAdditionalActions = currentTermProgress.status !== Status.Relearning;\n\n    const onRightClicked = () => {\n        const previousData = termTrainingProgress[currentTermIdx];\n        memoizeOldProgress(previousData);\n\n        updateTermProgressKnown(termTrainingProgress[currentTermIdx], trainingDefinition, profile);\n        setCurrentTermIdx((currentValue) => currentValue + 1)\n    }\n\n    const onEasyClicked = () => {\n        const previousData = termTrainingProgress[currentTermIdx];\n        memoizeOldProgress(previousData);\n\n        updateTermProgressEasy(termTrainingProgress[currentTermIdx], profile);\n        setCurrentTermIdx((currentValue) => currentValue + 1)\n    }\n\n    const onWrongClicked = () => {\n        const oldProgress = termTrainingProgress[currentTermIdx];\n        memoizeOldProgress(oldProgress);\n\n        updateTermProgressDontKnown(termTrainingProgress[currentTermIdx], profile);\n        setCurrentTermIdx((currentValue) => currentValue + 1)\n    }\n\n    const onHardClicked = () => {\n        const oldProgress = termTrainingProgress[currentTermIdx];\n        memoizeOldProgress(oldProgress);\n\n        updateTermProgressHard(termTrainingProgress[currentTermIdx], profile);\n        setCurrentTermIdx((currentValue) => currentValue + 1)\n    }\n\n    const memoizeOldProgress = (termTrainingProgress: TermTrainingProgress) => {\n        const data = oldTermProgress.current;\n        data.push(copyTermTrainingProgress(termTrainingProgress))\n    }\n\n    const onChangeOrder = (e : ChangeEvent<HTMLSelectElement>) => {\n        const newOrder = e.target.value as Order;\n        localStorage.setItem(lastSelectedOrderKey, newOrder);\n        console.log(`set to local storage: ${lastSelectedOrderKey} = ${newOrder}`)\n        setOrderObject({order: newOrder});\n        setCurrentTermIdx(0);\n        oldTermProgress.current.length = 0;\n    };\n\n    const renderOrderSelector = () => {\n        return (\n            <CInputGroup size=\"sm\" className=\"flex-grow-0 mb-2\">\n                <CInputGroupText component=\"label\">Order:</CInputGroupText>\n                <CFormSelect\n                    value={orderObject.order}\n                    onChange={onChangeOrder}\n                    options={orderOptions}\n                />\n            </CInputGroup>\n        );\n    }\n\n    const renderCardArea = () => {\n        return (\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-md-6 col-lg-5\">\n                    <div className=\"d-flex flex-column gap-3 justify-content-center align-items-center\">\n\n                        {renderOrderSelector()}\n\n                        <Card question={question} answer={answer} termTrainingProgress={currentTermProgress}/>\n\n                        <div className=\"d-flex justify-content-between w-100\">\n                            <CButtonGroup vertical role=\"group\" aria-label=\"Vertical button group\">\n                                <CButton className=\"mb-2 py-2\" color={\"danger\"} onClick={onWrongClicked}>\n                                    ← Wrong&nbsp;&nbsp;\n                                </CButton>\n                                {canShowAdditionalActions &&\n                                    <CButton className=\"py-2\" color={\"danger\"} variant={\"outline\"}\n                                             onClick={onHardClicked}>Hard</CButton>}\n                            </CButtonGroup>\n\n                            <CButtonGroup vertical role=\"group\" aria-label=\"Vertical button group\">\n                                <CButton className=\"mb-2 py-2\" color={\"success\"} onClick={onRightClicked}>\n                                    &nbsp;&nbsp;Right →\n                                </CButton>\n                                {canShowAdditionalActions &&\n                                    <CButton className=\"py-2\" color={\"success\"} variant={\"outline\"}\n                                             onClick={onEasyClicked}>Easy</CButton>}\n                            </CButtonGroup>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"d-flex flex-column h-100\">\n            <div>{renderCardArea()}</div>\n            <div className=\"mt-auto\">{renderProgressArea()}</div>\n        </div>\n    );\n}\n\nexport default TrainingSession;","export function shuffle<T>(array: T[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}","import {LepeatProfile} from \"../model/LepeatProfile\";\nimport {TrainingDefinition} from \"../model/TrainingDefinition\";\nimport {Status, TermTrainingProgress} from \"../model/TrainingProgress\";\nimport {markProfileDirty} from \"./Persistence\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst isDebug = process.env.REACT_APP_IS_DEBUG === 'true';\n\nexport enum TrainingType {\n    OnlyNew = 'onlyNew',\n    OnlyRepeat = 'onlyRepeat',\n    All = 'all'\n}\n\nexport function updateTermProgressEasy(termProgress: TermTrainingProgress, profile : LepeatProfile) {\n    switch (termProgress.status) {\n        case Status.Relearning:\n            throw new Error(\"Unexpected `easy` action for relearning step\");\n        case Status.Learning:\n            termProgress.status = Status.Repetition;\n            termProgress.iterationNumber = 0;\n            break;\n        case Status.Repetition:\n            termProgress.iterationNumber += 2;\n            break;\n        default:\n            throw new Error(`Unknown status: ${termProgress.status}`);\n    }\n\n    termProgress.lastEditDate = Date.now();\n    markProfileDirty(profile);\n}\n\nexport function updateTermProgressHard(termProgress: TermTrainingProgress, profile : LepeatProfile) {\n    if (termProgress.status === Status.Relearning){\n        throw new Error(\"Unexpected `hard` action for relearning step\");\n    }\n\n    termProgress.lastEditDate = Date.now();\n    markProfileDirty(profile);\n}\n\nexport function updateTermProgressKnown(termProgress: TermTrainingProgress, trainingDefinitions: TrainingDefinition,profile : LepeatProfile) {\n    const currentIteration = termProgress.iterationNumber;\n\n    switch (termProgress.status) {\n        case Status.Relearning:\n            termProgress.status = Status.Repetition;\n            termProgress.iterationNumber = Math.max(0, termProgress.iterationNumber - 1); \n            break;\n        case Status.Learning:\n            if (currentIteration + 1 >= trainingDefinitions.learningIntervals.length){\n                termProgress.status = Status.Repetition;\n                termProgress.iterationNumber = 0;\n            } else {\n                termProgress.iterationNumber += 1;\n            }\n            break;\n        case Status.Repetition:\n            termProgress.iterationNumber += 1;\n            break;\n        default:\n            throw new Error(`Unknown status: ${termProgress.status}`);\n    }\n\n    termProgress.lastEditDate = Date.now();\n    markProfileDirty(profile);\n}\n\nexport function updateTermProgressDontKnown(termProgress: TermTrainingProgress, profile : LepeatProfile) {\n    switch (termProgress.status) {\n        case Status.Relearning:\n            termProgress.status = Status.Learning;\n            termProgress.iterationNumber = 0;\n            break;\n        case Status.Learning:\n            termProgress.iterationNumber = 0;\n            break;\n        case Status.Repetition:\n            termProgress.status = Status.Relearning;\n            break;\n        default:\n            throw new Error(`Unknown status: ${termProgress.status}`);\n    }\n\n    termProgress.lastEditDate = Date.now();\n    markProfileDirty(profile);\n}\n\nexport function copyTermTrainingProgress(termTrainingProgress: TermTrainingProgress) {\n    return {...termTrainingProgress};\n}\nexport function updateTermTrainingProgress(source : TermTrainingProgress, target: TermTrainingProgress, profile : LepeatProfile) {\n    target.status = source.status;\n    target.lastEditDate = source.lastEditDate;\n    target.iterationNumber = source.iterationNumber;\n    markProfileDirty(profile);\n}\n\nexport function getTermsToTrain(profile: LepeatProfile, trainingDefinition: TrainingDefinition, trainingType: TrainingType) {\n    let trainingProgress = profile.trainingProgresses.get(trainingDefinition);\n    if (!trainingProgress) {\n        trainingProgress = {progress: new Map()};\n        profile.trainingProgresses.set(trainingDefinition, trainingProgress);\n    }\n\n    let progressForCurrentTraining = trainingProgress.progress;\n    let currentTime = Date.now();\n\n    return profile.terms\n        .filter(t => !t.isBacklog)\n        .filter(term => trainingDefinition.configuration.has(term.termDefinition))\n        .map(value => {\n            let termProgress = progressForCurrentTraining.get(value);\n            if (!termProgress) {\n                termProgress = {\n                    id: uuidv4(),\n                    status: Status.Learning,\n                    term: value,\n                    iterationNumber: 0,\n                    lastEditDate: undefined\n                };\n\n                progressForCurrentTraining.set(value, termProgress);\n            }\n            return termProgress;\n        })\n        .filter(progress => {\n            switch (trainingType) {\n              case TrainingType.OnlyNew:\n                return progress.status === Status.Learning || progress.status === Status.Relearning;\n              case TrainingType.OnlyRepeat:\n                return progress.status === Status.Repetition;\n            }\n            return true;\n        })\n        .filter(progress => doNeedToTrain(progress, trainingDefinition, currentTime).doNeed);\n}\n\nexport function doNeedToTrain(progress: TermTrainingProgress, trainingDefinition: TrainingDefinition, currentTime: number): {\n    doNeed: boolean;\n    remainingDelayBeforeStart: number\n} {\n    const lastTrainingDate = progress.lastEditDate;\n    if (!lastTrainingDate) {\n        return {doNeed: true, remainingDelayBeforeStart: 0};\n    }\n    let interval = getInterval(trainingDefinition, progress);\n\n    const nextTrainDateForTerm = lastTrainingDate + interval;\n    const remainingDelayBeforeStart = nextTrainDateForTerm - currentTime;\n    const doNeedTrain = remainingDelayBeforeStart <= 0;\n    return {doNeed: doNeedTrain, remainingDelayBeforeStart};\n}\n\nfunction getInterval(trainingDefinition: TrainingDefinition, progress: TermTrainingProgress) {\n    switch (progress.status) {\n        case Status.Relearning:\n            return fromMinutes(trainingDefinition.learningIntervals[trainingDefinition.learningIntervals.length - 1] ?? 0);\n        case Status.Learning:\n            return fromMinutes(getIntervalSafe(trainingDefinition.learningIntervals, progress.iterationNumber));\n        case Status.Repetition:\n            return fromHours(getIntervalSafe(trainingDefinition.repetitionIntervals, progress.iterationNumber));\n    }\n}\n\nfunction fromMinutes(number: number) {\n    if (isDebug){\n        return 1000 * 30;\n    }\n\n    return number * 1000 * 60;\n}\n\nfunction fromHours(number: number) {\n    if (isDebug){\n        return 1000 * 60;\n    }\n\n    return number * 1000 * 60 * 60 * 24;\n}\n\nfunction getIntervalSafe(array: number[], iteration: number): number {\n    if (array.length === 0) {\n        return 0;\n    }\n\n    if (iteration < 0) {\n        return array[0];\n    } else if (iteration >= array.length) {\n        return array[array.length - 1];\n    } else {\n        return array[iteration];\n    }\n}","export function findStringsInCurlyBraces(input: string) {\n    const regex = /\\{([^}]+)\\}/g;\n    const matches = input.match(regex);\n\n    if (!matches) {\n        return [];\n    }\n\n    return matches.map(match => match.slice(1, -1));\n}\n\nexport function substituteBraces(input: string) {\n    return input.replace(/\\{/g, \"<%= \").replace(/\\}/g, \" %>\");\n}\n\nexport function isEmptyOrBlank(str: string) {\n    return str === null || str.length <= 0 || str.trim() === '';\n}"],"names":["_ref","question","answer","termTrainingProgress","mode","setMode","useState","useEffect","onClick","_jsxs","CCard","className","children","_jsx","CCardTitle","CCardText","style","minHeight","CCardFooter","getIterationsDescription","readableIteration","iterationNumber","status","Status","Learning","concat","Repetition","Relearning","UndoButton","undo","CButton","color","CIcon","icon","cilActionUndo","orderOptions","label","value","prepareString","pattern","attributesData","placeholderAttributes","Set","findStringsInCurlyBraces","placeholdersData","Array","from","entries","filter","v","has","name","forEach","e","_","substituteBraces","compiled","navigate","useNavigate","location","useLocation","trainingName","trainingType","state","profile","useContext","ProfileContext","trainingDefinition","trainingDefinitions","find","oldTermProgress","useRef","currentTermIdx","setCurrentTermIdx","lastSelectedOrderKey","defaultOrder","localStorage","getItem","console","log","orderObject","setOrderObject","order","useMemo","termsToTrain","getTermsToTrain","reverse","sort","a","b","lastEditDate","Number","MAX_VALUE","MIN_VALUE","array","i","length","j","Math","floor","random","shuffle","onUndoClicked","prevTermProgressData","current","pop","updateTermTrainingProgress","currentValue","error","onSkipClicked","push","onPrevClicked","hasUndo","renderProgressArea","_Fragment","disabled","cilChevronDoubleLeft","cilChevronDoubleRight","CProgress","thin","currentTermProgress","currentTerm","term","currentTermDefinition","termDefinition","currentRule","configuration","get","questionPattern","attributeValues","answerPattern","canShowAdditionalActions","onRightClicked","previousData","memoizeOldProgress","updateTermProgressKnown","onEasyClicked","updateTermProgressEasy","onWrongClicked","oldProgress","updateTermProgressDontKnown","onHardClicked","updateTermProgressHard","copyTermTrainingProgress","onChangeOrder","newOrder","target","setItem","CInputGroup","size","CInputGroupText","component","CFormSelect","onChange","options","Card","CButtonGroup","vertical","role","variant","isDebug","process","TrainingType","termProgress","Error","Date","now","markProfileDirty","currentIteration","max","learningIntervals","source","trainingProgress","trainingProgresses","progress","Map","set","progressForCurrentTraining","currentTime","terms","t","isBacklog","map","id","uuidv4","undefined","OnlyNew","OnlyRepeat","doNeedToTrain","doNeed","lastTrainingDate","remainingDelayBeforeStart","interval","_trainingDefinition$l","fromMinutes","getIntervalSafe","number","fromHours","repetitionIntervals","getInterval","iteration","input","matches","match","slice","replace","isEmptyOrBlank","str","trim"],"sourceRoot":""}