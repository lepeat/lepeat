{"version":3,"file":"static/js/926.c828ba88.chunk.js","mappings":"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","sources":["model/TrainingDefinition.ts","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","components/trainingModificationPage/TermTraining.tsx","utils/utils.ts","../node_modules/@coreui/icons/src/free/cil-trash.ts","../node_modules/@coreui/icons/src/free/cil-plus.ts","components/trainingModificationPage/TrainingIntervals.tsx","components/trainingModificationPage/TrainingModificationPage.tsx","components/trainingModificationPage/validation.ts","utils/string.ts","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumb.tsx","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumbItem.tsx","../node_modules/@coreui/react/src/components/card/CCardText.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormInput.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx"],"sourcesContent":["import {TermDefinition} from \"./TermDefinition\";\nimport {AttributeDefinition} from \"./AttributeDefinition\";\nimport {MergeableEntity} from \"./MergeableEntity\";\n\nexport const DEFAULT_LEARNING_INTERVALS = [1, 10]\nexport const DEFAULT_REPETITION_INTERVALS = [1, 2, 5, 12, 30, 75, 187];\n\nexport interface TrainingDefinition extends MergeableEntity {\n    name: string,\n    configuration: Map<TermDefinition, TermTrainingRule>;\n    learningIntervals: number[];\n    repetitionIntervals: number[];\n}\n\nexport interface TermTrainingRule extends MergeableEntity {\n    questionPattern: string;\n    answerPattern: string;\n}\n\n//TODO: remove this\nexport interface TermTrainingRuleV1 extends TermTrainingRule {\n    attributesToShow: AttributeDefinition[];\n    attributesToGuess: AttributeDefinition[];\n}","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\nimport {CCardText, CFormCheck, CFormInput, CFormSelect, CInputGroup, CInputGroupText} from \"@coreui/react\";\nimport {TermDefinition} from \"../../model/TermDefinition\";\n\ninterface TermTrainingProps {\n    questionString: string,\n    answerString: string,\n    termDefinition: TermDefinition,\n    questionInputChanged: (value: string) => void;\n    answerInputChanged: (value: string) => void;\n    checkBoxClicked: () => void;\n    isEnabled: boolean;\n}\n\n// TODO: exclude already existing terms in training from termDefinitions Array\nconst TermTraining: FC<TermTrainingProps> = (props) => {\n    const {\n        questionString,\n        answerString,\n        termDefinition,\n        questionInputChanged,\n        answerInputChanged,\n        checkBoxClicked,\n        isEnabled\n    } = props;\n    const onCheckBoxClicked = (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\n        e.preventDefault();\n        checkBoxClicked();\n    }\n\n    return (\n        <div className=\"d-flex justify-content-between\">\n            <CFormCheck id=\"termEnabled\" onClick={(e) => onCheckBoxClicked(e)} defaultChecked={isEnabled}/>\n            <div className=\"mb-3 w-100 ms-2\">\n                <CFormInput className=\"mb-2\"  type=\"text\" placeholder={termDefinition.name} disabled/>\n\n                <CInputGroup className=\"mb-3\">\n                    <CInputGroupText id=\"inputGroup-sizing-default\">Question</CInputGroupText>\n                    <CFormInput value={questionString}\n                                disabled={!isEnabled}\n                                onChange={(e) => questionInputChanged(e.target.value)}/>\n                </CInputGroup>\n\n                <CInputGroup className=\"mb-3\">\n                    <CInputGroupText id=\"inputGroup-sizing-default\">Answer</CInputGroupText>\n                    <CFormInput value={answerString}\n                                disabled={!isEnabled}\n                                onChange={(e) => answerInputChanged(e.target.value)}/>\n                </CInputGroup>\n            </div>\n        </div>\n    )\n}\n\nexport default TermTraining;","export const indexifyFunction = <Type, >(idx: number, f: (idx: number, value: Type) => void) => {\n    return (value: Type) => f(idx, value)\n}","export var cilTrash = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M96,472a23.82,23.82,0,0,0,23.579,24H392.421A23.82,23.82,0,0,0,416,472V152H96Zm32-288H384V464H128Z' class='ci-primary'/><rect width='32' height='200' x='168' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='240' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='312' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M328,88V40c0-13.458-9.488-24-21.6-24H205.6C193.488,16,184,26.542,184,40V88H64v32H448V88ZM216,48h80V88H216Z' class='ci-primary'/>\"];\n","export var cilPlus = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='440 240 272 240 272 72 240 72 240 240 72 240 72 272 240 272 240 440 272 440 272 272 440 272 440 240' class='ci-primary'/>\"];\n","import React, {FC, useState} from 'react';\nimport {CCardText, CFormInput} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {cilPlus, cilTrash} from \"@coreui/icons\";\n\nconst NEW_INTERVAL_DEFAULT_VALUE = 1;\ninterface Props {\n    title: string,\n    intervals: number[],\n    onIntervalsChanges: (intervals: number[]) => void\n}\n\nconst TrainingIntervals: FC<Props> = ({title, intervals, onIntervalsChanges}) => {\n\n    const intervalChanged = (idx: number, value: string) => {\n        intervals[idx] = +value;\n        onIntervalsChanges(intervals);\n    }\n\n    const onRemoveClicked = (idx: number) => {\n        intervals.splice(idx, 1);\n        onIntervalsChanges(intervals);\n    }\n\n    const onAddClicked = () => {\n        intervals.push(NEW_INTERVAL_DEFAULT_VALUE);\n        onIntervalsChanges(intervals);\n    }\n\n    return (\n        <div>\n            <CCardText className=\"\">{title}</CCardText>\n            {intervals.map((interval, idx) => {\n                return (\n                    <div className=\"w-25 mb-2 d-flex align-items-center gap-3\" key={`interval-${idx}`}>\n                        <CFormInput type=\"number\" min={1} onChange={(e) => intervalChanged(idx, e.target.value)} value={interval}/>\n                        <CIcon icon={cilTrash} onClick={() => onRemoveClicked(idx)}/>\n                    </div>\n                )\n            })}\n            <CIcon className=\"mt-1\" icon={cilPlus} size=\"xl\" onClick={onAddClicked}/>\n        </div>\n    )\n}\n\nexport default TrainingIntervals;","import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport ProfileContext from \"../../contexts/ProfileContext\";\nimport ToastContext from \"../../contexts/ToastContext\";\nimport {TermDefinition} from \"../../model/TermDefinition\";\nimport {\n    DEFAULT_LEARNING_INTERVALS,\n    DEFAULT_REPETITION_INTERVALS,\n    TermTrainingRule\n} from \"../../model/TrainingDefinition\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {CBreadcrumb, CBreadcrumbItem, CButton, CFormInput} from \"@coreui/react\";\nimport TermTraining from \"./TermTraining\";\nimport {indexifyFunction} from \"../../utils/utils\";\nimport TrainingIntervals from \"./TrainingIntervals\";\nimport {validateConfiguration, validateTrainingData} from \"./validation\";\nimport {markProfileDirty} from \"../../services/Persistence\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst getTermsTrainingInitData = (termDefinitions: TermDefinition[]) => termDefinitions.map(e => ({\n    termDefinition: e,\n    questionString: \"\",\n    answerString: \"\",\n    isEnabled: true\n}));\n\nconst copyTermsTrainingInitData = (allTermDefinitions: TermDefinition[], configuration: Map<TermDefinition, TermTrainingRule>) =>\n    (allTermDefinitions.map(termDefinition => ({\n        termDefinition,\n        questionString: configuration.get(termDefinition)?.questionPattern ?? \"\",\n        answerString: configuration.get(termDefinition)?.answerPattern ?? \"\",\n        isEnabled: configuration.has(termDefinition)\n    })));\n\nfunction TrainingModificationPage() {\n    const {id} = useParams();\n    const navigate = useNavigate();\n    const {profile} = useContext(ProfileContext);\n    const {showToast} = useContext(ToastContext)\n    const isEditMode = id !== undefined;\n\n    const [trainingName, setTrainingName] = useState(\"\");\n    const [termsTrainingData, setTermsTrainingData] = useState(getTermsTrainingInitData(profile.termDefinitions));\n    const [learningIntervals, setLearningIntervals] = useState(DEFAULT_LEARNING_INTERVALS);\n    const [repetitionIntervals, setRepetitionIntervals] = useState(DEFAULT_REPETITION_INTERVALS);\n\n    const [isIdCorrect, setIsIdCorrect] = useState(true);\n\n\n    useEffect(() => {\n        if (isEditMode) {\n            const selectedTraining = profile.trainingDefinitions.find(e => e.id === id)\n            if (!selectedTraining) {\n                setIsIdCorrect(false);\n            } else {\n                setTrainingName(selectedTraining.name);\n                setLearningIntervals(selectedTraining.learningIntervals);\n                setRepetitionIntervals(selectedTraining.repetitionIntervals);\n                setTermsTrainingData(copyTermsTrainingInitData(profile.termDefinitions, selectedTraining.configuration));\n            }\n        }\n    }, []);\n\n    const trainingNameChanged = (newTrainingName: string) => {\n        setTrainingName(newTrainingName);\n    }\n\n    const setEmptyTrainingState = useCallback(() => {\n        setTrainingName(\"\");\n        setTermsTrainingData(getTermsTrainingInitData(profile.termDefinitions));\n        setLearningIntervals(DEFAULT_LEARNING_INTERVALS)\n        setRepetitionIntervals(DEFAULT_REPETITION_INTERVALS)\n    }, [setTrainingName, setTermsTrainingData]);\n\n    const onQuestionStringChanges = (idx: number, value: string) => {\n        termsTrainingData[idx].questionString = value;\n        setTermsTrainingData([...termsTrainingData]);\n    }\n    const onAnswerStringChanges = (idx: number, value: string) => {\n        termsTrainingData[idx].answerString = value;\n        setTermsTrainingData([...termsTrainingData]);\n    }\n\n    const changeEnableState = (idx: number) => {\n        termsTrainingData[idx].isEnabled = !termsTrainingData[idx].isEnabled;\n        setTermsTrainingData([...termsTrainingData]);\n    }\n\n    const onLearningIntervalsChanges = (intervals: number[]) => {\n        setLearningIntervals([...intervals])\n    }\n    const onRepetitionIntervalsChanges = (intervals: number[]) => {\n        setRepetitionIntervals([...intervals])\n    }\n\n    const onSaveClicked = () => {\n        const validationError = validateTrainingData(profile, trainingName, learningIntervals, repetitionIntervals, id);\n\n        if (validationError) {\n            showToast(validationError, \"danger\");\n            return;\n        }\n\n        const configuration = new Map<TermDefinition, TermTrainingRule>;\n        termsTrainingData.filter(e => e.isEnabled).forEach(e => configuration.set(e.termDefinition, {\n            id: uuidv4(),\n            lastEditDate: Date.now(),\n            questionPattern: e.questionString,\n            answerPattern: e.answerString\n        }));\n\n        const configurationError = validateConfiguration(configuration);\n        if (configurationError) {\n            showToast(configurationError, \"danger\");\n            return;\n        }\n\n        if (isEditMode) {\n            const selectedTraining = profile.trainingDefinitions.find(e => e.id === id)!\n            selectedTraining.name = trainingName;\n            selectedTraining.configuration = configuration;\n            selectedTraining.learningIntervals = learningIntervals;\n            selectedTraining.repetitionIntervals = repetitionIntervals;\n            selectedTraining.lastEditDate = Date.now();\n        } else {\n            profile.trainingDefinitions.push({\n                id: uuidv4(),\n                lastEditDate: Date.now(),\n                name: trainingName,\n                configuration: configuration,\n                learningIntervals: learningIntervals,\n                repetitionIntervals: repetitionIntervals\n            });\n        }\n\n        markProfileDirty(profile);\n        if (isEditMode) {\n            showToast(\"Training successfully updated\", \"success\");\n            navigate(-1);\n        } else {\n            showToast(\"Training successfully created\", \"success\");\n            setEmptyTrainingState();\n        }\n    }\n\n    const onDeleteClicked = () => {\n        if (!id) {\n            return;\n        }\n        const selectedTraining = profile.trainingDefinitions.find(e => e.id === id)!\n        profile.trainingProgresses.delete(selectedTraining);\n        profile.trainingDefinitions = profile.trainingDefinitions.filter(t => t.id !== selectedTraining.id);\n\n        // TODO: make delete synchronization-safe\n        markProfileDirty(profile)\n        showToast(\"Training removed\", \"success\")\n        navigate(-1)\n    }\n\n\n    return isIdCorrect ? (\n        <div>\n            <CBreadcrumb>\n                <CBreadcrumbItem href=\"#/trainings\">Trainings</CBreadcrumbItem>\n                <CBreadcrumbItem active>{isEditMode ? \"Edit training\" : \"Add training\"}</CBreadcrumbItem>\n            </CBreadcrumb>\n            <div>\n                <CFormInput className=\"w-50 mb-4\" placeholder={\"Training name\"}\n                            onChange={(e) => trainingNameChanged(e.target.value)} value={trainingName}/>\n                {termsTrainingData.map((e, idx) => {\n                    return (\n                        <TermTraining\n                            key={idx}\n                            questionString={e.questionString}\n                            answerString={e.answerString}\n                            termDefinition={e.termDefinition}\n                            questionInputChanged={indexifyFunction(idx, onQuestionStringChanges)}\n                            answerInputChanged={indexifyFunction(idx, onAnswerStringChanges)}\n                            checkBoxClicked={() => changeEnableState(idx)}\n                            isEnabled={e.isEnabled}/>\n                    )\n                })\n                }\n\n                <div className=\"d-flex flex-column gap-4\">\n                    <TrainingIntervals title={\"Learning intervals (in minutes)\"} intervals={learningIntervals}\n                                       onIntervalsChanges={onLearningIntervalsChanges}/>\n                    <TrainingIntervals title={\"Repetition intervals (in days)\"} intervals={repetitionIntervals}\n                                       onIntervalsChanges={onRepetitionIntervalsChanges}/>\n                </div>\n\n\n                <div className=\"mt-5 d-flex justify-content-between\">\n                    <CButton onClick={onSaveClicked} color=\"primary\">Save</CButton>\n                    {isEditMode ? <CButton onClick={onDeleteClicked} color=\"danger\">Delete</CButton> : null}\n                </div>\n            </div>\n        </div>\n    ) : <div>Id is not correct</div>;\n}\n\nexport default TrainingModificationPage;","import {findStringsInCurlyBraces, isEmptyOrBlank} from \"../../utils/string\";\nimport {LepeatProfile} from \"../../model/LepeatProfile\";\nimport {TermDefinition} from \"../../model/TermDefinition\";\nimport {TermTrainingRule} from \"../../model/TrainingDefinition\";\n\nexport function validateTrainingData(profile: LepeatProfile, trainingName: string, learningIntervals: number[], repetitionIntervals: number[], currentTrainingId?: string) {\n    if (isEmptyOrBlank(trainingName)) {\n        return \"Training name is empty\";\n    }\n    if (profile.trainingDefinitions.some(e => e.name === trainingName && e.id !== currentTrainingId)) {\n        return \"Training with the same already exists\";\n    }\n    if (learningIntervals.length <= 0) {\n        return \"Learning intervals should not be empty\";\n    }\n    if (repetitionIntervals.length <= 0) {\n        return \"Repetition intervals should not be empty\";\n    }\n    return null;\n}\n\n// TODO add {}} validation\nexport function validateConfiguration(configuration: Map<TermDefinition, TermTrainingRule>) {\n    if (configuration.size <= 0) {\n        return \"No training rule is defined\";\n    }\n\n    return Array.from(configuration.entries()).map(e => {\n        const attrs = new Set(e[0].attributes.map(e => e.name));\n        const placeholderQuestionAttributes = findStringsInCurlyBraces(e[1].questionPattern);\n        const placeholderAnswerAttributes = findStringsInCurlyBraces(e[1].answerPattern);\n\n        if (placeholderQuestionAttributes.length <= 0) {\n            return \"Question pattern should be filled with attributes (use {} for this)\";\n        }\n\n        if (placeholderAnswerAttributes.length <= 0) {\n            return \"Answer pattern should be filled with attributes (use {} for this)\";\n        }\n\n        const notExistingQuestionAttributes = placeholderQuestionAttributes.filter(e => !attrs.has(e));\n        if (notExistingQuestionAttributes.length > 0) {\n            return `Term ${e[0].name} does not have attribute with name: ${notExistingQuestionAttributes.join(\", \")}`\n        }\n\n        const notExistingAnswerAttributes = placeholderAnswerAttributes.filter(e => !attrs.has(e));\n        if (notExistingAnswerAttributes.length > 0) {\n            return `Term ${e[0].name} does not have attribute with name: ${notExistingAnswerAttributes.join(\", \")}`\n        }\n\n        return null\n    }).filter(e => e !== null)[0] ?? null;\n}","export function findStringsInCurlyBraces(input: string) {\n    const regex = /\\{([^}]+)\\}/g;\n    const matches = input.match(regex);\n\n    if (!matches) {\n        return [];\n    }\n\n    return matches.map(match => match.slice(1, -1));\n}\n\nexport function substituteBraces(input: string) {\n    return input.replace(/\\{/g, \"<%= \").replace(/\\}/g, \" %>\");\n}\n\nexport function isEmptyOrBlank(str: string) {\n    return str === null || str.length <= 0 || str.trim() === '';\n}","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CBreadcrumbProps extends HTMLAttributes<HTMLOListElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CBreadcrumb = forwardRef<HTMLOListElement, CBreadcrumbProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className={classNames('breadcrumb', className)} {...rest} ref={ref}>\n          {children}\n        </ol>\n      </nav>\n    )\n  },\n)\n\nCBreadcrumb.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCBreadcrumb.displayName = 'CBreadcrumb'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CBreadcrumbItemProps extends HTMLAttributes<HTMLLIElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The `href` attribute for the inner `<CLink>` component.\n   */\n  href?: string\n}\n\nexport const CBreadcrumbItem = forwardRef<HTMLLIElement, CBreadcrumbItemProps>(\n  ({ children, active, className, href, ...rest }, ref) => {\n    return (\n      <li\n        className={classNames(\n          'breadcrumb-item',\n          {\n            active: active,\n          },\n          className,\n        )}\n        {...(active && { 'aria-current': 'page' })}\n        {...rest}\n        ref={ref}\n      >\n        {href ? <CLink href={href}>{children}</CLink> : children}\n      </li>\n    )\n  },\n)\n\nCBreadcrumbItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  href: PropTypes.string,\n}\n\nCBreadcrumbItem.displayName = 'CBreadcrumbItem'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardTextProps extends HTMLAttributes<HTMLParagraphElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardText = forwardRef<HTMLParagraphElement, CCardTextProps>(\n  ({ children, component: Component = 'p', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardText.displayName = 'CCardText'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback = forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n  (\n    { children, className, component: Component = 'div', invalid, tooltip, valid, ...rest },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          {\n            [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n            [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCFormFeedback.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CFormText = forwardRef<HTMLDivElement | HTMLSpanElement, CFormTextProps>(\n  ({ children, className, component: Component = 'div', ...rest }, ref) => {\n    return (\n      <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCFormText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CInputGroupText = forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n  ({ children, className, component: Component = 'span', ...rest }, ref) => {\n    return (\n      <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCInputGroupText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n"],"names":["DEFAULT_LEARNING_INTERVALS","DEFAULT_REPETITION_INTERVALS","CFormCheck","forwardRef","_a","ref","className","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","id","indeterminate","inline","invalid","label","reverse","_b","type","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","color","size","shape","htmlFor","propTypes","PropTypes","displayName","props","questionString","answerString","termDefinition","questionInputChanged","answerInputChanged","checkBoxClicked","isEnabled","_jsxs","children","_jsx","onClick","e","preventDefault","onCheckBoxClicked","defaultChecked","CFormInput","placeholder","name","disabled","CInputGroup","CInputGroupText","value","onChange","target","indexifyFunction","idx","f","cilTrash","cilPlus","_ref","title","intervals","onIntervalsChanges","CCardText","map","interval","min","intervalChanged","CIcon","icon","splice","onRemoveClicked","onAddClicked","push","getTermsTrainingInitData","termDefinitions","useParams","navigate","useNavigate","profile","useContext","ProfileContext","showToast","ToastContext","isEditMode","undefined","trainingName","setTrainingName","useState","termsTrainingData","setTermsTrainingData","learningIntervals","setLearningIntervals","repetitionIntervals","setRepetitionIntervals","isIdCorrect","setIsIdCorrect","selectedTraining","trainingDefinitions","find","allTermDefinitions","configuration","_configuration$get$qu","_configuration$get","_configuration$get$an","_configuration$get2","get","questionPattern","answerPattern","has","copyTermsTrainingInitData","setEmptyTrainingState","useCallback","onQuestionStringChanges","onAnswerStringChanges","CBreadcrumb","CBreadcrumbItem","href","active","trainingNameChanged","newTrainingName","TermTraining","changeEnableState","TrainingIntervals","CButton","onSaveClicked","validationError","currentTrainingId","isEmptyOrBlank","some","length","validateTrainingData","Map","filter","forEach","set","uuidv4","lastEditDate","Date","now","configurationError","_Array$from$map$filte","Array","from","entries","attrs","Set","attributes","placeholderQuestionAttributes","findStringsInCurlyBraces","placeholderAnswerAttributes","notExistingQuestionAttributes","join","notExistingAnswerAttributes","validateConfiguration","markProfileDirty","onDeleteClicked","trainingProgresses","delete","t","input","matches","match","slice","substituteBraces","replace","str","trim","CLink","component","Component","CFormFeedback","_c","tooltip","CFormFloating","CFormText","CFormControlWrapper","floatingClassName","text","FormControlValidation","delay","plainText","_d","_e","setValue","timeOutId","setTimeout","clearTimeout","event"],"sourceRoot":""}