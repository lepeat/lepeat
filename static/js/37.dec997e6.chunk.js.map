{"version":3,"file":"static/js/37.dec997e6.chunk.js","mappings":"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","sources":["components/termModificationPage/TermModificationPage.tsx","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumb.tsx","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumbItem.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormInput.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx"],"sourcesContent":["import React, {ChangeEvent, FC, useContext, useEffect, useState} from \"react\";\nimport ToastContext from \"../../contexts/ToastContext\";\nimport ProfileContext from \"../../contexts/ProfileContext\";\nimport {AttributeDefinition} from \"../../model/AttributeDefinition\";\nimport {markProfileDirty} from \"../../services/Persistence\";\nimport {\n    CBreadcrumb,\n    CBreadcrumbItem,\n    CButton,\n    CFormInput,\n    CFormSelect,\n    CInputGroup,\n    CInputGroupText\n} from \"@coreui/react\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {TermDefinition} from \"../../model/TermDefinition\";\nimport {Term} from \"../../model/Term\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst TermDefinitionSelection: FC<{\n    onChangeSelect: (e: ChangeEvent<HTMLSelectElement>) => void,\n    selectedDefinition: TermDefinition\n}> = ({onChangeSelect, selectedDefinition}) => {\n    const {profile} = useContext(ProfileContext);\n    const termDefinitions = profile.termDefinitions;\n\n    const selectedDefinitionIdx = termDefinitions.findIndex(e => e === selectedDefinition)\n\n    return (<CFormSelect\n        onChange={onChangeSelect}\n        options={\n            termDefinitions.map((e, idx) => ({label: e.name, value: `${idx}`})\n            )\n        }\n        value={selectedDefinitionIdx}\n        className=\"mb-4\"\n    />)\n}\n\nfunction getInitTermData(termDefinition: TermDefinition) {\n    const attributeValues = new Map<AttributeDefinition, string>();\n    termDefinition.attributes.forEach(e => attributeValues.set(e, \"\"));\n\n    return {\n        termDefinition,\n        attributeValues\n    }\n}\n\nfunction copyTermData(term: Term) {\n    return {...term, attributeValues: new Map(term.attributeValues)}\n}\n\nfunction TermModificationPage() {\n    const {id} = useParams();\n    const navigate = useNavigate();\n    const isEditMode = id !== undefined;\n\n    const {profile} = useContext(ProfileContext);\n    const {showToast} = useContext(ToastContext)\n\n    const termDefinitions = profile.termDefinitions;\n    const terms = profile.terms;\n    const [shownTerm, setShownTerm] = useState(getInitTermData(termDefinitions[0]));\n    const [isIdCorrect, setIsIdCorrect] = useState(true);\n\n    useEffect(() => {\n        if (isEditMode) {\n            const selectedTerm = profile.terms.find(e => e.id === id)\n            if (!selectedTerm) {\n                setIsIdCorrect(false);\n            } else {\n                setShownTerm(copyTermData(selectedTerm))\n            }\n        }\n    }, [])\n\n    const onChangeSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n        setShownTerm({\n            ...shownTerm,\n            termDefinition: termDefinitions[+e.target.value],\n        })\n    }\n\n    const onChangeInput = (value: string, attribute: AttributeDefinition) => {\n        shownTerm.attributeValues.set(attribute, value);\n        setShownTerm({...shownTerm});\n    }\n\n    const onSaveClicked = () => {\n        const newTermAttributesData = new Map<AttributeDefinition, string>();\n        shownTerm.termDefinition.attributes.forEach(e => newTermAttributesData.set(e, shownTerm.attributeValues.get(e) ?? \"\"));\n\n        if (isEditMode) {\n            const currentWord = terms.find(e => e.id === id)!;\n            currentWord.attributeValues = newTermAttributesData;\n            currentWord.termDefinition = shownTerm.termDefinition;\n            currentWord.lastEditDate = Date.now();\n        } else {\n            terms.push({\n                id: uuidv4(),\n                termDefinition: shownTerm.termDefinition,\n                attributeValues: newTermAttributesData,\n                isBacklog: true,\n                lastEditDate: Date.now(),\n            })\n        }\n\n        markProfileDirty(profile);\n        showToast(isEditMode ? \"Word edited\" : \"Word added\", \"success\")\n\n        if (isEditMode) {\n            navigate(-1)\n        } else {\n            setShownTerm(getInitTermData(termDefinitions[0]));\n        }\n    }\n\n    const onDeleteClicked = () => {\n        if (!id) {\n            return;\n        }\n        \n        // TODO: make delete synchronization-save \n        profile.terms = profile.terms.filter(e => e.id !== id);\n        markProfileDirty(profile)\n        showToast(\"Word removed\", \"success\")\n        navigate(-1)\n    }\n\n    return isIdCorrect ? (<div>\n        <CBreadcrumb>\n            <CBreadcrumbItem href=\"#/words\">Terms</CBreadcrumbItem>\n            <CBreadcrumbItem active>{isEditMode ? \"Edit term\" : \"Add term\"}</CBreadcrumbItem>\n        </CBreadcrumb>\n        <TermDefinitionSelection onChangeSelect={onChangeSelect} selectedDefinition={shownTerm.termDefinition}/>\n        {shownTerm.termDefinition.attributes.map((attribute, idx) => {\n            let data = shownTerm.attributeValues.get(attribute) ?? \"\";\n            return (\n                <CInputGroup className=\"mb-3\" key={idx}>\n                    <CInputGroupText id=\"basic-addon3\">{attribute.name}</CInputGroupText>\n                    <CFormInput id={`${data}-${idx}`} value={data} aria-describedby=\"basic-addon3\"\n                                onChange={(e) => onChangeInput(e.target.value, attribute)}/>\n                </CInputGroup>\n            );\n        })}\n        <div className=\"mt-5 d-flex justify-content-between\">\n            <CButton onClick={onSaveClicked} color=\"primary\">Save</CButton>\n            {isEditMode ? <CButton onClick={onDeleteClicked} color=\"danger\">Delete</CButton> : null}\n        </div>\n    </div>) : <div>Id is not correct</div>;\n\n}\n\nexport default TermModificationPage;","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CBreadcrumbProps extends HTMLAttributes<HTMLOListElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CBreadcrumb = forwardRef<HTMLOListElement, CBreadcrumbProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className={classNames('breadcrumb', className)} {...rest} ref={ref}>\n          {children}\n        </ol>\n      </nav>\n    )\n  },\n)\n\nCBreadcrumb.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCBreadcrumb.displayName = 'CBreadcrumb'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CBreadcrumbItemProps extends HTMLAttributes<HTMLLIElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The `href` attribute for the inner `<CLink>` component.\n   */\n  href?: string\n}\n\nexport const CBreadcrumbItem = forwardRef<HTMLLIElement, CBreadcrumbItemProps>(\n  ({ children, active, className, href, ...rest }, ref) => {\n    return (\n      <li\n        className={classNames(\n          'breadcrumb-item',\n          {\n            active: active,\n          },\n          className,\n        )}\n        {...(active && { 'aria-current': 'page' })}\n        {...rest}\n        ref={ref}\n      >\n        {href ? <CLink href={href}>{children}</CLink> : children}\n      </li>\n    )\n  },\n)\n\nCBreadcrumbItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  href: PropTypes.string,\n}\n\nCBreadcrumbItem.displayName = 'CBreadcrumbItem'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback = forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n  (\n    { children, className, component: Component = 'div', invalid, tooltip, valid, ...rest },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          {\n            [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n            [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCFormFeedback.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CFormText = forwardRef<HTMLDivElement | HTMLSpanElement, CFormTextProps>(\n  ({ children, className, component: Component = 'div', ...rest }, ref) => {\n    return (\n      <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCFormText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CInputGroupText = forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n  ({ children, className, component: Component = 'span', ...rest }, ref) => {\n    return (\n      <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCInputGroupText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n"],"names":["TermDefinitionSelection","_ref","onChangeSelect","selectedDefinition","profile","useContext","ProfileContext","termDefinitions","selectedDefinitionIdx","findIndex","e","_jsx","CFormSelect","onChange","options","map","idx","label","name","value","concat","className","getInitTermData","termDefinition","attributeValues","Map","attributes","forEach","set","id","useParams","navigate","useNavigate","isEditMode","undefined","showToast","ToastContext","terms","shownTerm","setShownTerm","useState","isIdCorrect","setIsIdCorrect","useEffect","selectedTerm","find","term","_jsxs","children","CBreadcrumb","CBreadcrumbItem","href","active","target","attribute","_shownTerm$attributeV2","data","get","CInputGroup","CInputGroupText","CFormInput","onChangeInput","CButton","onClick","onSaveClicked","newTermAttributesData","_shownTerm$attributeV","currentWord","lastEditDate","Date","now","push","uuidv4","isBacklog","markProfileDirty","color","onDeleteClicked","filter","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CLink","CFormFeedback","_c","component","Component","invalid","tooltip","valid","_b","CFormControlValidation","describedby","feedback","feedbackInvalid","feedbackValid","tooltipFeedback","CFormFloating","CFormText","CFormControlWrapper","floatingClassName","floatingLabel","text","FormControlValidation","CFormLabel","htmlFor","delay","plainText","size","_d","type","_e","setValue","timeOutId","setTimeout","clearTimeout","event","customClassName","htmlSize","option","index","disabled","key"],"sourceRoot":""}