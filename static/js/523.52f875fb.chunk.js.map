{"version":3,"file":"static/js/523.52f875fb.chunk.js","mappings":"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","sources":["services/TermsSerializer.ts","components/dataExchange/TermsImportExport.tsx","../node_modules/classnames/index.js","../node_modules/react-bootstrap/esm/ThemeProvider.js","../node_modules/react-bootstrap/esm/Container.js"],"sourcesContent":["import {Term} from \"../model/Term\";\nimport {LepeatProfile} from \"../model/LepeatProfile\";\nimport {markProfileDirty} from \"./Persistence\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport function serializeTerms(terms: Term[]) {\n    return terms\n        .map(term => serializeTerm(term))\n        .join('\\n');\n\n    function serializeTerm(term: Term) {\n        const attributes = term\n            .termDefinition\n            .attributes\n            .map(attr => term\n                .attributeValues\n                .get(attr))\n            .join('\\t');\n        \n        return `${term.id}\\t${term.termDefinition.name}\\t${attributes}`; \n    }\n}\n\nexport function deserializeTerms(data: string, profile: LepeatProfile){\n    const lines = data.split('\\n');\n    const terms = new Map(profile.terms.map(term => [term.id, term]));\n    const termDefinitions = new Map(profile.termDefinitions.map(termDefinition => [termDefinition.name, termDefinition]))\n    const currentDate = Date.now();\n    for (const line of lines) {\n        //TODO: handle errors\n        const values = line.split('\\t');\n        const id = values[0] ?? uuidv4();\n        const termDefinition = termDefinitions.get(values[1]);\n        if (!termDefinition) \n            continue;\n\n        const attributeValues = new Map(termDefinition.attributes.map((value, index) => [value, values[index + 2]]));\n\n        const term = terms.get(id);\n        if (term){\n            if (term.termDefinition === termDefinition && mapsAreEqual(term.attributeValues, attributeValues)){\n                // data is the same, do nothing\n            }\n            else {\n                term.termDefinition = termDefinition;\n                term.attributeValues = attributeValues;\n                term.lastEditDate = currentDate;\n            }\n        } else {\n            const term: Term = {\n                id: id,\n                termDefinition: termDefinition,\n                attributeValues: attributeValues,\n                isBacklog: true,\n                lastEditDate: currentDate,\n            };\n\n            terms.set(id, term);\n        }\n    }\n\n    profile.terms = Array.from(terms.values());\n    markProfileDirty(profile);\n}\n\nfunction mapsAreEqual<K, V>(map1: Map<K,V>, map2: Map<K,V>): boolean {\n    if (map1.size !== map2.size) {\n        return false;\n    }\n\n    let areEqual = true;\n    map1.forEach((value, key) => {\n        if (!map2.has(key) || map2.get(key) !== value) {\n            areEqual = false;\n        }\n    });\n    return areEqual;\n}","import React, {CSSProperties, useContext, useState} from 'react';\nimport { Container } from 'react-bootstrap';\nimport {deserializeTerms, serializeTerms} from \"../../services/TermsSerializer\";\nimport ToastContext from \"../../contexts/ToastContext\";\nimport ProfileContext from \"../../contexts/ProfileContext\";\n\nfunction TermsImportExport() {\n    const { showToast } = useContext(ToastContext)\n    const { profile } = useContext(ProfileContext);\n    const [textBoxData, setTextBoxData] = useState(serializeTerms(profile.terms));\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(textBoxData);\n        showToast(\"Words are copied to clipboard\", \"success\");\n    };\n\n    const setTermsFromTextBoxData = () => {\n        deserializeTerms(textBoxData, profile);\n        showToast(\"Words are imported\", \"success\");\n    };\n\n    const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setTextBoxData(event.target.value);\n    };\n\n    const textAreaStyle: CSSProperties = {\n        width: '80%',\n        height: '80%',\n        margin: '0 auto',\n    };\n\n    const containerStyle: CSSProperties = {\n        height: '90vh',\n    };\n\n    return (\n        <Container className=\"page d-flex flex-column align-items-center\" style={containerStyle}>\n            <textarea style={textAreaStyle} value={textBoxData} onChange={handleInput}/>\n            <button onClick={copyToClipboard}>Copy textbox data to clipboard</button>\n            <button onClick={setTermsFromTextBoxData}>Import words from textbox data (overwrites existing)</button>\n        </Container>\n    );\n}\n\nexport default TermsImportExport;","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","\"use client\";\n\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nexport const DEFAULT_MIN_BREAKPOINT = 'xs';\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {},\n  breakpoints: DEFAULT_BREAKPOINTS,\n  minBreakpoint: DEFAULT_MIN_BREAKPOINT\n});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\nfunction ThemeProvider({\n  prefixes = {},\n  breakpoints = DEFAULT_BREAKPOINTS,\n  minBreakpoint = DEFAULT_MIN_BREAKPOINT,\n  dir,\n  children\n}) {\n  const contextValue = useMemo(() => ({\n    prefixes: {\n      ...prefixes\n    },\n    breakpoints,\n    minBreakpoint,\n    dir\n  }), [prefixes, breakpoints, minBreakpoint, dir]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: contextValue,\n    children: children\n  });\n}\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const {\n    prefixes\n  } = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useBootstrapBreakpoints() {\n  const {\n    breakpoints\n  } = useContext(ThemeContext);\n  return breakpoints;\n}\nexport function useBootstrapMinBreakpoint() {\n  const {\n    minBreakpoint\n  } = useContext(ThemeContext);\n  return minBreakpoint;\n}\nexport function useIsRTL() {\n  const {\n    dir\n  } = useContext(ThemeContext);\n  return dir === 'rtl';\n}\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent;\n  // If it's a functional component make sure we don't break it with a ref\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({\n    ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, {\n      ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;"],"names":["mapsAreEqual","map1","map2","size","areEqual","forEach","value","key","has","get","showToast","useContext","ToastContext","profile","ProfileContext","textBoxData","setTextBoxData","useState","terms","map","term","attributes","termDefinition","attr","attributeValues","join","concat","id","name","serializeTerm","_jsxs","Container","className","style","height","children","_jsx","width","margin","onChange","event","target","onClick","copyToClipboard","navigator","clipboard","writeText","setTermsFromTextBoxData","data","lines","split","Map","termDefinitions","currentDate","Date","now","line","_values$","values","uuidv4","index","lastEditDate","isBacklog","set","Array","from","markProfileDirty","deserializeTerms","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","isArray","inner","apply","toString","Object","prototype","includes","call","module","exports","default","DEFAULT_BREAKPOINTS","DEFAULT_MIN_BREAKPOINT","ThemeContext","React","prefixes","breakpoints","minBreakpoint","Consumer","Provider","useBootstrapPrefix","prefix","defaultPrefix","_ref","ref","bsPrefix","fluid","as","Component","props","suffix","displayName"],"sourceRoot":""}