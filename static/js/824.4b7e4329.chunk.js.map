{"version":3,"file":"static/js/824.4b7e4329.chunk.js","mappings":"4MAKe,SAASA,EAAKC,GAA6C,IAA5C,QAACC,EAAO,KAAEC,EAAI,yBAAEC,GAAyBH,EAEnE,MAAM,cAACI,EAAa,kBAAEC,EAAiB,aAAEC,EAAY,KAAEC,EAAI,WAAEC,EAAU,gBAAEC,EAAe,MAAEC,IACtFC,EAAAA,EAAAA,UAAS,CAACV,UAASC,QAAOU,EAAAA,kBAExB,aAACC,GAAgBH,EAEvB,OACII,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4CAA2CD,SAAA,EACtDE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPF,UAAU,OACVG,KAAK,OACLC,MAAOP,GAAgB,GACvBQ,SAAWC,GAAMb,EAAgBa,EAAEC,OAAOH,SAE7CjB,MAELW,EAAAA,EAAAA,MAACU,EAAAA,EAAM,IAAKpB,IAAeW,SAAA,EACvBE,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAAV,SACNT,EAAaoB,KAAKC,IACfV,EAAAA,EAAAA,KAACW,EAAAA,EAAS,IAAKD,EAAYE,sBAAqBd,SAC3CY,EAAYG,QAAQJ,KAAKK,IACtBd,EAAAA,EAAAA,KAACe,EAAAA,EAAc,IAAKD,EAAOE,iBAAgBlB,SACtCgB,EAAOG,OAAO,qBAMnCjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,IAAK9B,IAAmBU,SAC9BR,EAAKmB,KAAKU,IACP5B,EAAW4B,IAEPnB,EAAAA,EAAAA,KAACW,EAAAA,EAAS,IAAKQ,EAAIC,cAAatB,SAC3BqB,EAAIE,MAAMZ,KAAKa,IAERtB,EAAAA,EAAAA,KAACe,EAAAA,EAAc,IAAKO,EAAKC,eAAczB,SAClCwB,EAAKL,OAAO,wBAWzD,C,iICvCA,MAAMO,EAAyCzC,IAAY,IAAX,IAACoC,GAAIpC,EACjD,MAAM0C,GAAWC,EAAAA,EAAAA,MAKjB,OAAO1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAWC,QAJZC,KACfN,EAAS,kBAADO,OAAmBb,EAAIc,SAASC,IAAK,GAGI,EAkCzD,QA/BA,WACI,MAAM,QAACC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GACvBZ,GAAWC,EAAAA,EAAAA,MACXY,EAAYH,EAAQI,oBAE1B,IAAIvD,GAA8BwD,EAAAA,EAAAA,UAAQ,IAAM,CAC5C,CACIC,OAAQ,WACRC,SAAU,YAEd,CACID,OAAQ,SACRC,SAAU,UACVC,KAAMC,IAAA,IAAC,IAACzB,GAAIyB,EAAA,OAAK5C,EAAAA,EAAAA,KAACwB,EAAU,CAACL,IAAKA,GAAM,KAE7C,IAGH,MAAMlC,EAAcqD,EAAU7B,KAAIJ,IAAC,CAAM,GAAMA,EAAE6B,GAAI,SAAY7B,EAAEwC,SAM7DC,GAAY9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,CAACjB,QAJNkB,KACjBvB,EAAS,iBAAiB,EAGoBwB,MAAM,OAAMnD,SAAC,qBAE/D,OAAQE,EAAAA,EAAAA,KAAA,OAAAF,UACJE,EAAAA,EAAAA,KAAClB,EAAAA,EAAK,CAACE,QAASA,EAASC,KAAMA,EAAMC,yBAA0B4D,KAEvE,C","sources":["components/table/Table.jsx","components/trainingsPage/TrainingsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport {useTable, useGlobalFilter} from \"react-table\";\nimport {CButton, CFormInput, CTable, CTableBody, CTableDataCell, CTableHead, CTableRow} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Table({columns, data, additionalHeaderElements}) {\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setGlobalFilter, state} =\n        useTable({columns, data}, useGlobalFilter);\n\n    const {globalFilter} = state;\n\n    return (\n        <div>\n            <div className=\"w-100 mb-3 d-flex justify-content-between\">\n                <CFormInput\n                    className=\"w-50\"\n                    type=\"text\"\n                    value={globalFilter || ''}\n                    onChange={(e) => setGlobalFilter(e.target.value)}\n                />\n                {additionalHeaderElements}\n            </div>\n            <CTable {...getTableProps()}>\n                <CTableHead>\n                    {headerGroups.map((headerGroup) => (\n                        <CTableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <CTableDataCell {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                </CTableDataCell>\n                            ))}\n                        </CTableRow>\n                    ))}\n                </CTableHead>\n                <CTableBody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                        prepareRow(row);\n                        return (\n                            <CTableRow {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <CTableDataCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </CTableDataCell>\n                                    );\n                                })}\n                            </CTableRow>\n                        );\n                    })}\n                </CTableBody>\n            </CTable>\n        </div>\n    )\n}\n\n// Define the prop types\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    additionalHeaderElements: PropTypes.any, // Not marking as .isRequired makes it optional\n};","import React, {FC, useContext, useMemo} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport CIcon from \"@coreui/icons-react\";\nimport {cilPencil} from \"@coreui/icons\";\nimport ProfileContext from \"../../contexts/ProfileContext\";\nimport {Column, Row} from \"react-table\";\nimport {CButton} from \"@coreui/react\";\nimport Table from \"../table/Table\";\n\ninterface DataType {\n    id: string,\n    training: string,\n    actions: any\n}\n\nconst EditButton: FC<{ row: Row<DataType> }> = ({row}) => {\n    const navigate = useNavigate();\n    const handleEdit = () => {\n        navigate(`/edit-training/${row.original.id}`)\n    };\n\n    return <CIcon icon={cilPencil} onClick={handleEdit}/>;\n};\n\nfunction TrainingsPage() {\n    const {profile} = useContext(ProfileContext);\n    const navigate = useNavigate();\n    const trainings = profile.trainingDefinitions;\n\n    let columns: Column<DataType>[] = useMemo(() => [\n        {\n            Header: 'Training',\n            accessor: 'training',\n        },\n        {\n            Header: 'Action',\n            accessor: 'actions',\n            Cell: ({row}) => <EditButton row={row}/>,\n        }\n    ], []);\n\n\n    const data: any[] = trainings.map(e => ({'id': e.id, 'training': e.name}))\n\n    const onAddClicked = () => {\n        navigate(`/add-training/`)\n    }\n\n    const addButton = <CButton onClick={onAddClicked} color=\"info\">Add new training</CButton>\n\n    return (<div>\n        <Table columns={columns} data={data} additionalHeaderElements={addButton}/>\n    </div>)\n}\n\nexport default TrainingsPage;"],"names":["Table","_ref","columns","data","additionalHeaderElements","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","state","useTable","useGlobalFilter","globalFilter","_jsxs","children","className","_jsx","CFormInput","type","value","onChange","e","target","CTable","CTableHead","map","headerGroup","CTableRow","getHeaderGroupProps","headers","column","CTableDataCell","getHeaderProps","render","CTableBody","row","getRowProps","cells","cell","getCellProps","EditButton","navigate","useNavigate","CIcon","icon","cilPencil","onClick","handleEdit","concat","original","id","profile","useContext","ProfileContext","trainings","trainingDefinitions","useMemo","Header","accessor","Cell","_ref2","name","addButton","CButton","onAddClicked","color"],"sourceRoot":""}